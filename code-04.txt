INF = 1000000000

def floyd_warshall(vertex, adjacency_matrix):
    for k in range(0, vertex):
        for i in range(0, vertex):
            for j in range(0, vertex):
                adjacency_matrix[i][j] = min(adjacency_matrix[i][j], adjacency_matrix[i][k] + adjacency_matrix[k][j])

    print("o/d", end='')
    for i in range(0, vertex):
        print("\t{:d}".format(i+1), end='')
    print()
    for i in range(0, vertex):
        print("{:d}".format(i+1), end='')
        for j in range(0, vertex):
            print("\t{:d}".format(adjacency_matrix[i][j]), end='')
        print()

"""
input is given as adjacency matrix,
input represents this undirected graph
A--1--B
| /
3 /
| 1
| /
C--2--D
should set infinite value for each pair of vertex that has no edge
"""
adjacency_matrix = [
    [0, 5, INF, 10],
    [INF, 0, 3, INF],
    [INF, INF, 0, 1],
    [INF, INF, INF, 0]
]

floyd_warshall(4, adjacency_matrix)




# output:
# o/d     1       2       3       4
# 1       0       5       8       9
# 2       1000000000      0       3       4
# 3       1000000000      1000000000      0       1        
# 4       1000000000      1000000000      1000000000      0